//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""68e73d88-e76b-4c20-9a26-4c4a4713fad8"",
            ""actions"": [
                {
                    ""name"": ""SouthButton"",
                    ""type"": ""Button"",
                    ""id"": ""acb33dff-1e6a-4be5-add4-a2b71990fcbb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SliderUp"",
                    ""type"": ""Button"",
                    ""id"": ""3ee29d7f-bd0f-4b53-b38b-726e63df99b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SliderDown"",
                    ""type"": ""Button"",
                    ""id"": ""1996e6ee-5cb1-46a6-8da8-60a63f931198"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WestButton"",
                    ""type"": ""Button"",
                    ""id"": ""925dff71-eaad-46a8-bb07-c0c581ccaa4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NorthButton"",
                    ""type"": ""Button"",
                    ""id"": ""061687b8-bc78-43aa-b3f0-67d71c417aa7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""R2"",
                    ""type"": ""Button"",
                    ""id"": ""1dc1ce2e-e99a-463a-aafa-51978f3b722a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L2"",
                    ""type"": ""Button"",
                    ""id"": ""783c221d-b27f-47ed-b6eb-518c16c88d41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6700eba8-195b-4c26-968e-07b826c34600"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Keyboard"",
                    ""action"": ""SouthButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""71bb8a3a-e96e-4d06-a975-3e29d37f27ac"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Keyboard"",
                    ""action"": ""SliderUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82385e32-eb35-4880-b38b-3f408e08418b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad;Keyboard"",
                    ""action"": ""SliderDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f00af0f8-0b97-4622-916e-e89d47738629"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""WestButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""053bc30d-39b6-4a04-b25a-d225e90a905a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard;Gamepad"",
                    ""action"": ""NorthButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ae9843e5-9260-439b-a85e-444b8f51a888"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff451a2e-e0db-460b-a318-0aa1eb848fe1"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SouthButton = m_Player.FindAction("SouthButton", throwIfNotFound: true);
        m_Player_SliderUp = m_Player.FindAction("SliderUp", throwIfNotFound: true);
        m_Player_SliderDown = m_Player.FindAction("SliderDown", throwIfNotFound: true);
        m_Player_WestButton = m_Player.FindAction("WestButton", throwIfNotFound: true);
        m_Player_NorthButton = m_Player.FindAction("NorthButton", throwIfNotFound: true);
        m_Player_R2 = m_Player.FindAction("R2", throwIfNotFound: true);
        m_Player_L2 = m_Player.FindAction("L2", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SouthButton;
    private readonly InputAction m_Player_SliderUp;
    private readonly InputAction m_Player_SliderDown;
    private readonly InputAction m_Player_WestButton;
    private readonly InputAction m_Player_NorthButton;
    private readonly InputAction m_Player_R2;
    private readonly InputAction m_Player_L2;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SouthButton => m_Wrapper.m_Player_SouthButton;
        public InputAction @SliderUp => m_Wrapper.m_Player_SliderUp;
        public InputAction @SliderDown => m_Wrapper.m_Player_SliderDown;
        public InputAction @WestButton => m_Wrapper.m_Player_WestButton;
        public InputAction @NorthButton => m_Wrapper.m_Player_NorthButton;
        public InputAction @R2 => m_Wrapper.m_Player_R2;
        public InputAction @L2 => m_Wrapper.m_Player_L2;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SouthButton.started += instance.OnSouthButton;
            @SouthButton.performed += instance.OnSouthButton;
            @SouthButton.canceled += instance.OnSouthButton;
            @SliderUp.started += instance.OnSliderUp;
            @SliderUp.performed += instance.OnSliderUp;
            @SliderUp.canceled += instance.OnSliderUp;
            @SliderDown.started += instance.OnSliderDown;
            @SliderDown.performed += instance.OnSliderDown;
            @SliderDown.canceled += instance.OnSliderDown;
            @WestButton.started += instance.OnWestButton;
            @WestButton.performed += instance.OnWestButton;
            @WestButton.canceled += instance.OnWestButton;
            @NorthButton.started += instance.OnNorthButton;
            @NorthButton.performed += instance.OnNorthButton;
            @NorthButton.canceled += instance.OnNorthButton;
            @R2.started += instance.OnR2;
            @R2.performed += instance.OnR2;
            @R2.canceled += instance.OnR2;
            @L2.started += instance.OnL2;
            @L2.performed += instance.OnL2;
            @L2.canceled += instance.OnL2;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SouthButton.started -= instance.OnSouthButton;
            @SouthButton.performed -= instance.OnSouthButton;
            @SouthButton.canceled -= instance.OnSouthButton;
            @SliderUp.started -= instance.OnSliderUp;
            @SliderUp.performed -= instance.OnSliderUp;
            @SliderUp.canceled -= instance.OnSliderUp;
            @SliderDown.started -= instance.OnSliderDown;
            @SliderDown.performed -= instance.OnSliderDown;
            @SliderDown.canceled -= instance.OnSliderDown;
            @WestButton.started -= instance.OnWestButton;
            @WestButton.performed -= instance.OnWestButton;
            @WestButton.canceled -= instance.OnWestButton;
            @NorthButton.started -= instance.OnNorthButton;
            @NorthButton.performed -= instance.OnNorthButton;
            @NorthButton.canceled -= instance.OnNorthButton;
            @R2.started -= instance.OnR2;
            @R2.performed -= instance.OnR2;
            @R2.canceled -= instance.OnR2;
            @L2.started -= instance.OnL2;
            @L2.performed -= instance.OnL2;
            @L2.canceled -= instance.OnL2;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnSouthButton(InputAction.CallbackContext context);
        void OnSliderUp(InputAction.CallbackContext context);
        void OnSliderDown(InputAction.CallbackContext context);
        void OnWestButton(InputAction.CallbackContext context);
        void OnNorthButton(InputAction.CallbackContext context);
        void OnR2(InputAction.CallbackContext context);
        void OnL2(InputAction.CallbackContext context);
    }
}
